# add params to env file
# ADMIN_CHAT_ID = 568869711
# TOKEN - —Ç–æ–∫–µ–Ω —á–∞—Ç–±–æ—Ç–∞, –±–µ—Ä–µ—Ç—Å—è –∏–∑ @BotFather

import json
import time

from datetime import datetime, date
from json import JSONDecodeError
from logging import StreamHandler, getLogger

import redis as redis
import telebot
from envparse import Env
from telebot.types import Message

from ChatGPT import OpenAIWrapper
from DB import UserActioner, PostgresClient
from live import TelegramClient

from telebot import types

# —Å–µ–∫—Ü–∏—è —Ä–∞–±–æ—Ç—ã —Å –ª–æ–≥–≥–∏—Ä–æ–≤–∞–Ω–∏–µ–º
logger = getLogger(__name__)
logger.addHandler(StreamHandler())
logger.setLevel("INFO")
# –∫–æ–Ω–µ—Ü —Å–µ–∫—Ü–∏–º —Ä–∞–±–æ—Ç—ã —Å –ª–æ–≥–≥–∏—Ä–æ–≤–∞–Ω–∏–µ–º

env = Env()
TOKEN = env.str('TOKEN')
ADMIN_CHAT_ID = env.str('ADMIN_CHAT_ID')

# —Ä–∞–±–æ—Ç–∞ —Å –ë–î
postgres_client = PostgresClient(database="mydb", user='postgres', password='marmak', host='127.0.0.1', port='5432')


# –∫–æ–Ω–µ—Ü —Ä–∞–±–æ—Ç–∞ —Å –ë–î

class MyBot(telebot.TeleBot):
    def __init__(self, telegram_client: TelegramClient, user_actioner: UserActioner, *args, **kwargs):
        super().__init__(*args, **kwargs)
        self.telegram_client = telegram_client
        self.user_actioner = user_actioner
        self.mode = None

    def setup_resources(self):
        self.user_actioner.setup()

    def setup_mode(self, mode: str):
        self.mode = mode

    def shutdown_resources(self):
        self.user_actioner.shutdown()

    def shutdown(self):
        self.shutdown_resources()


telegram_client = TelegramClient(token=TOKEN, base_url='https://api.telegram.org/bot')
user_actioner = UserActioner(db_client=postgres_client)
bot = MyBot(token=TOKEN, telegram_client=telegram_client, user_actioner=user_actioner)
print('bot created')


@bot.message_handler(commands=['start'])
def start(message: Message):
    print('handle_start')
    # –°–µ–∫—Ü–∏—è –¥–ª—è –∑–∞–ø–∏—Å–∏ –Ω–æ–≤—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ json —Ñ–∞–π–ª.
    # –ó–∞–ø–∏—Å—ã–≤–∞–µ—Ç—Å—è –ª—é–±–æ–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å, –∫—Ç–æ –≤–æ—à–µ–ª –≤ –±–æ—Ç
    with open('users.json', 'r') as f:
        data_from_json = json.load(f)

    user_id = message.from_user.id
    username = message.from_user.username
    if str(user_id) not in data_from_json:
        data_from_json[user_id] = {"username": username}

    with open('users.json', 'w') as f:
        json.dump(data_from_json, f, indent=4, ensure_ascii=False)
    # –∫–æ–Ω–µ—Ü —Å–µ–∫—Ü–∏–∏ –¥–ª—è –∑–∞–ø–∏—Å–∏ –Ω–æ–≤—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ json —Ñ–∞–π–ª.

    verify_user(message=message, from_start=True)


@bot.message_handler(commands=['menu'])
def menu(message: Message):
    print('handle_menu')
    if not verify_user(message=message):
        exit()

    menu_keyboard_manager(message=message, menu="main_menu")


# –±–æ—Ç –æ—Ç–≤–µ—á–∞–µ—Ç –Ω–∞ –ª—é–±–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ —á–∞—Ç–µ, –∫—Ä–æ–º–µ —É–∫–∞–∑–∞–Ω–Ω—ã—Ö –≤—ã—à–µ –∫–æ–º–∞–Ω–¥
@bot.message_handler(func=lambda message: True)
def echo_all(message: Message):
    print(9)
    if not verify_user(message=message):
        exit()

    if bot.mode == 'vacancies':
        send_respond_vacancies(message)

    elif bot.mode == 'movies':
        send_respond_movies(message)

    elif bot.mode == 'say_speech':

        send_respond_from_gpt(message)
    else:
        pass


def menu_keyboard_manager(message: Message = None, menu = 1):
    print(14)

    if menu == "training_list":
        markup = types.InlineKeyboardMarkup()
        markup.row_width = 1
        markup.add(types.InlineKeyboardButton("–¢—Ä–µ–Ω–∏–Ω–≥ 1", callback_data="training_1"),
                   types.InlineKeyboardButton("–¢—Ä–µ–Ω–∏–Ω–≥ 2", callback_data="training_2"),
                   types.InlineKeyboardButton("–¢—Ä–µ–Ω–∏–Ω–≥ 3", callback_data="training_3"))
        bot.send_message(message.chat.id, "–ù–∏–∂–µ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω —Å–ø–∏—Å–æ–∫ –≤–∞—à–∏—Ö –Ω–µ–∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã—Ö —Ç—Ä–µ–Ω–∏–Ω–≥–æ–≤. \n"
                                          "–î–ª—è –ø—Ä–æ—Ö–æ–∂–¥–µ–Ω–∏—è –≤—ã–±–µ—Ä–∏—Ç–µ –ª—é–±–æ–π", reply_markup=markup)
    if menu == "my_results":
        bot.send_message(message.chat.id, "–í–∞—à –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –∑–∞ —Ç–µ–∫—É—â–∏–π –º–µ—Å—è—Ü = 0,96. \n"
                                          "–í–∞—à–∞ —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –≤—ã—à–µ —Å—Ä–µ–¥–Ω–µ–≥–æ –ø–æ –∫–æ–º–ø–∞–Ω–∏–∏ –Ω–∞ 4% \n"
                                          "–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–æ–π–¥–µ–Ω–Ω—ã—Ö —Ç—Ä–µ–Ω–∏–Ω–≥–æ–≤ –∑–∞ —Ç–µ–∫—É—â–∏–π –º–µ—Å—è—Ü = 3. \n"
                                          "–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –Ω–µ–ø—Ä–æ–π–¥–µ–Ω–Ω—ã—Ö —Ç—Ä–µ–Ω–∏–Ω–≥–æ–≤ = 5. \n")

        markup = types.InlineKeyboardMarkup()
        markup.row_width = 2
        markup.add(types.InlineKeyboardButton("–ú–µ–Ω—é", callback_data="main_menu"),
                   types.InlineKeyboardButton("–ú–æ–∏ —Ç—Ä–µ–Ω–∏–Ω–≥–∏", callback_data="my_trainings"))
        bot.send_message(message.chat.id, "–í—ã–±–µ—Ä–∏—Ç–µ —Å–ª–µ–¥—É—é—â–µ–µ –¥–µ–π—Å—Ç–≤–∏–µ", reply_markup=markup)
    elif menu == "main_menu":
        markup = types.InlineKeyboardMarkup()
        markup.row_width = 2
        markup.add(types.InlineKeyboardButton("üë®‚Äçüè´ –ú–æ–∏ —Ç—Ä–µ–Ω–∏–Ω–≥–∏", callback_data="training_list"),
                   types.InlineKeyboardButton("ü•á –ú–æ–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã", callback_data="my_results"),
                   types.InlineKeyboardButton("üåê –û—Ç–∫—Ä—ã—Ç—å –≤ WEB", url="https://www.google.com/"))
        bot.send_message(message.chat.id, "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ", reply_markup=markup)

    elif menu == 10:
        markup = types.InlineKeyboardMarkup()
        markup.row_width = 2
        markup.add(types.InlineKeyboardButton("Yes", callback_data="cb_yes"),
                   types.InlineKeyboardButton("No", callback_data="cb_no"))
        bot.send_message(message.chat.id, "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ", reply_markup=markup)
    elif menu == 2:
        id = message.text.replace("/send ", "")
        markup = types.InlineKeyboardMarkup()
        markup.add(types.InlineKeyboardButton('Sticker', callback_data='sticker'),
                   types.InlineKeyboardButton('Document', callback_data='document'))
        markup.add(types.InlineKeyboardButton('Photo', callback_data='photo'),
                   types.InlineKeyboardButton('Video', callback_data='video'))
        markup.add(types.InlineKeyboardButton('Audio', callback_data='Audio'))
     #   redis.hset('file_id', message.chat.id, '{}'.format(id))
        bot.send_message(message.chat.id, 'Select _One_ of these `Items.:D` \n\n (Note: GIFs are Documents)',
                         reply_markup=markup, parse_mode="Markdown")
    elif menu == 3:
        cid = message.chat.id
        markup = types.InlineKeyboardMarkup()
        b = types.InlineKeyboardButton("Help", callback_data='help')
        c = types.InlineKeyboardButton("About", callback_data='amir')
        markup.add(b, c)
        nn = types.InlineKeyboardButton("Inline Mode", switch_inline_query='')
        oo = types.InlineKeyboardButton("Channel", url='https://telegram.me/offlineteam')
        markup.add(nn, oo)
        id = message.from_user.id
        #redis.sadd('memberspy', id)
        bot.send_message(cid, "Hi \n\n Welcome To TweenRoBOT \n\n Please Choose One :)", disable_notification=True,
                         reply_markup=markup)

    elif menu == 4:
        bot.send_chat_action(message.chat.id, 'typing')
        markup = types.InlineKeyboardMarkup()
        btn = types.InlineKeyboardButton('Êà≥ËøôÈáåÔºÅ', url = 'https://t.me/yahahaabot')
        markup.add(btn)
        msg_id = bot.send_message(chat_id=message.chat.id, text=u'‰∏∫‰∫ÜÈò≤Ê≠¢Âà∑Â±èÔºåËØ∑Âú®ÁßÅËÅä‰∏≠‰ΩøÁî®Ê≠§ÂëΩ‰ª§Âì¶ÔΩû',reply_markup=markup).message_id
        time.sleep(5)
        bot.delete_message(message.chat.id,msg_id)

    elif menu == 5:
        markup = types.InlineKeyboardMarkup()
        markup.row(types.InlineKeyboardButton(text='English', callback_data='chooselang:en'),
                   types.InlineKeyboardButton(text='ŸÅÿßÿ±ÿ≥€å', callback_data='chooselang:fa'))
        bot.send_message(message.chat.id, "Hi \n\n Welcome To TweenRoBOT \n\n Please Choose One :)", disable_notification=True,
                         reply_markup=markup)
    # --- Multi Lang ---
    elif menu == 6:
        markup = types.InlineKeyboardMarkup()
        markup.add(types.InlineKeyboardButton("Google", url="http://www.google.com"))
        markup.add(types.InlineKeyboardButton("Yahoo", url="http://www.yahoo.com"))
        iq = types.InlineQueryResultCachedPhoto('aaa', 'Fileid', title='Title', reply_markup=markup)
        json_str = iq.to_json()
        assert 'aa' in json_str
        assert 'Fileid' in json_str
        assert 'Title' in json_str
        assert 'caption' not in json_str
        assert 'reply_markup' in json_str
        bot.send_message(message.chat.id, "Hi \n\n Welcome To TweenRoBOT \n\n Please Choose One :)", disable_notification=True,
                 reply_markup=markup)
    elif menu == 7:
        text = 'CI Test Message'
        markup = types.InlineKeyboardMarkup()
        markup.add(types.InlineKeyboardButton("Google", url="http://www.google.com"))
        markup.add(types.InlineKeyboardButton("Yahoo", url="http://www.yahoo.com"))
        ret_msg = bot.send_message(message.from_user.id, text, disable_notification=True, reply_markup=markup)
        assert ret_msg.message_id

    elif menu == 8:
        text = 'CI Test Message'
        markup = types.InlineKeyboardMarkup()
        markup.add(types.InlineKeyboardButton("Google", url="http://www.google.com"))
        markup.add(types.InlineKeyboardButton("Yahoo", url="http://www.yahoo.com"))
        ret_msg = bot.send_message(message.from_user.id, text, disable_notification=True, reply_markup=markup)
        markup.add(types.InlineKeyboardButton("Google2", url="http://www.google.com"))
        markup.add(types.InlineKeyboardButton("Yahoo2", url="http://www.yahoo.com"))
        new_msg = bot.edit_message_reply_markup(chat_id=message.from_user.id, message_id=ret_msg.message_id, reply_markup=markup)
        assert new_msg.message_id

    elif menu == 9:
        markup = types.InlineKeyboardMarkup()
        if message.text.count(' ') != 1:
            bot.send_chat_action(message.chat.id, 'typing')
            bot.send_message(message.chat.id, 'ËæìÂÖ•Ê†ºÂºèÊúâËØØÔºå‰æãÔºö`/yyets Á•ûÁõæÂ±ÄÁâπÂ∑•`', parse_mode='Markdown')
            return
        bot.send_chat_action(message.chat.id, 'typing')
        season_count, msg = message.text.split(' ')[1]
        if season_count == 0:
            bot.send_message(message.chat.id, msg)
            return
        elif season_count == 255:
            bot.send_message(message.chat.id, msg)
            return
        for button in range(1, season_count + 1):
            markup.add(types.InlineKeyboardButton
                       ("Á¨¨%sÂ≠£" % button,
                        callback_data='%s %s' % (message.text.split(' ')[1], button)))
        bot.send_message(message.chat.id, "‰Ω†ÊÉ≥ÁúãÁ¨¨Âá†Â≠£Âë¢ÔºüËØ∑ÁÇπÂáªÈÄâÊã©", reply_markup=markup)

    elif menu == 10:
        dict = {"Name": "John", "Language": "Python", "API": "pyTelegramBotAPI"}

        buttons = []

        for key, value in dict.items():
            buttons.append(
                [types.InlineKeyboardButton(text=key, url='google.com')]
            )
        keyboard = types.InlineKeyboardMarkup(buttons)
        bot.send_message(message.from_user.id, text='f', reply_markup=keyboard)

def keyboard_manager(action: str):
    print(13)

    keyboard = types.ReplyKeyboardMarkup(row_width=1, resize_keyboard=True)  # Connect the keyboard
    if action == 'add_phone':
        button_phone = types.KeyboardButton(text="–û—Ç–ø—Ä–∞–≤—å —Å–≤–æ–π –Ω–æ–º–µ—Ä",
                                            request_contact=True)  # Specify the name of the button that the user will see
        keyboard.add(button_phone)  # Add this button

    return keyboard


def verify_user(message: Message, from_start=False):
    print('verify_user')
    # —Ä–∞–±–æ—Ç–∞ —Å –ë–î Postgres
    # —Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É—é—Ç—Å—è —Ç–æ–ª—å–∫–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏, –µ—Å–ª–∏ –æ–Ω–∏ –æ—Ç–ø—Ä–∞–≤–∏–ª–∏ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –∏ —ç—Ç–æ—Ç –Ω–æ–º–µ—Ä –µ—Å—Ç—å –≤ –±–µ–ª–æ–º —Å–ø–∏—Å–∫–µ
    user_id = message.from_user.id
    username = message.from_user.username
    chat_id = message.chat.id

    with open('whitelist_phone_numbers.txt', 'r') as file:
        # read all content of a file
        content = file.read()

    user = bot.user_actioner.get_user(user_id=user_id)

    if not user:
        print('verify_user1')

        keyboard = keyboard_manager(action='add_phone')
        bot.send_message(message.from_user.id,
                         text=f'–≠—Ç–æ –∑–∞–∫—Ä—ã—Ç—ã–π –±–æ—Ç. –ù–µ–æ–±—Ö–æ–¥–∏–º–∞ –ø—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ –Ω–æ–º–µ—Ä—É —Ç–µ–ª–µ—Ñ–æ–Ω–∞: {username}. '
                              f'–í–∞—à ID: {user_id}. '
                              f'–î–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞ –∫ –±–æ—Ç—É –≤–æ—Å–ø–æ–ª—å–∑—É–π—Ç–µ—Å—å —Ñ—É–Ω–∫—Ü–∏–µ–π "–û—Ç–ø—Ä–∞–≤—å '
                              f'—Å–≤–æ–π –Ω–æ–º–µ—Ä".'
                         , reply_markup=keyboard)
    elif user and user[4] and user[4] in content:
        print('verify_user2')
        print(from_start)
        if from_start:
            # –±–æ—Ç –æ—Ç–≤–µ—á–∞–µ—Ç –≤ —á–∞—Ç–µ –Ω–∞ –∫–æ–º–∞–Ω–¥—É /start
            bot.reply_to(message=message, text=f'–í—ã —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã: {username}. '
                                               f'–í–∞—à ID: {user_id}')
        return True

    else:  # –∫–æ–≥–¥–∞ user –µ—Å—Ç—å –≤ –±–∞–∑–µ, –Ω–æ –µ–≥–æ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –Ω–µ –≤ –±–µ–ª–æ–º —Å–ø–∏—Å–∫–µ
        print('verify_user3')
        # –±–æ—Ç –æ—Ç–≤–µ—á–∞–µ—Ç –≤ —á–∞—Ç–µ –Ω–∞ –∫–æ–º–∞–Ω–¥—É /start
        bot.reply_to(message=message,
                     text=f'–£ –í–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–º—É –±–æ—Ç—É. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ HR –º–µ–Ω–µ–¥–∂–µ—Ä—É –í–∞—à–µ–π –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏. '
                          f'–í–∞—à ID: {user_id}')
    # –∫–æ–Ω–µ—Ü —Ä–∞–±–æ—Ç–∞ —Å –ë–î

    return False

@bot.callback_query_handler(func=lambda call: True)
def handle_query(call):

    print(call.data)

    if call.data=="training_list":
        bot.answer_callback_query(callback_query_id=call.id,
                              show_alert=False,
                              text="You Clicked " + call.data)
        delete_message = bot.delete_message(chat_id=call.message.chat.id, message_id=call.message.message_id)
        menu_keyboard_manager(message=call.message, menu="training_list")
    elif call.data=="my_results":
        bot.answer_callback_query(callback_query_id=call.id,
                              show_alert=False,
                              text="You Clicked " + call.data)
        delete_message = bot.delete_message(chat_id=call.message.chat.id, message_id=call.message.message_id)
        menu_keyboard_manager(message=call.message, menu="my_results")
    elif call.data=="main_menu":
        bot.answer_callback_query(callback_query_id=call.id,
                              show_alert=False,
                              text="You Clicked " + call.data)
        delete_message = bot.delete_message(chat_id=call.message.chat.id, message_id=call.message.message_id)
        menu_keyboard_manager(message=call.message, menu="main_menu")


def handle_report(message: Message):
    print('report')
    # –±–æ—Ç –æ—Ç–≤–µ—á–∞–µ—Ç –≤ —á–∞—Ç–µ –Ω–∞ –∫–æ–º–∞–Ω–¥—É /report
    bot.reply_to(message=message, text=f'–£ —Ç–µ–±—è –∫—Ä–∞—Å–∏–≤–æ–µ –∏–º—è, {message.text}!')


@bot.message_handler(commands=['report'])
def report(message: Message):
    print('handle_report')
    if not verify_user(message=message):
        exit()

    bot.user_actioner.update_last_date(user_id=message.from_utser.id, last_date=date.today())
    bot.send_message(message.from_user.id, text='–îo–±—Ä—ã–π –¥–µ–Ω—å. –Ø –±–æ—Ç —Å–∏—Å—Ç–µ–º—ã –î–æ–∫—Ç—Ä–∏–Ω–∞. –ü—Ä–µ–¥—Å—Ç–∞–≤—å—Ç–µ—Å—å, –ø–æ–∂-—Ç–∞')
    bot.register_next_step_handler(message, callback=handle_report)
    bot.setup_mode('report')


def send_respond_vacancies(message: Message):
    print('send_respond_vacancies')
    # –±–æ—Ç –æ—Ç—Å—ã–ª–∞–µ—Ç –≤–æ–ø—Ä–æ—Å –≤ ChatGpt API –∏ –ø–æ–ª—É—á–µ–Ω–Ω—ã–π –æ—Ç–≤–µ—Ç –ø–∏—à–µ—Ç –≤ —á–∞—Ç
    with open('datasets_vacancies_requirements.txt', 'r', encoding='utf-8') as f:
        lines = f.readlines()
        max_caracters = 10000
        for i in range(len(', '.join(lines)) // max_caracters + 1):
            text = ''.join(lines)[i * max_caracters:(i + 1) * max_caracters]
            bot.send_message(message.from_user.id, OpenAIWrapper().get_answer(
                f"–ù–∞–π–¥–∏ –≤ —Ç–µ–∫—Å—Ç–µ –Ω–∏–∂–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ {message.text} \n \n {text}"))


@bot.message_handler(commands=['vacancies'])
def vacancies(message: Message):
    print('handle_vacancies')
    if not verify_user(message=message):
        exit()

    bot.send_message(message.from_user.id, text='–ó–∞–¥–∞–π –º–Ω–µ –≤–æ–ø—Ä–æ—Å –æ –≤–∞–∫–∞–Ω—Å–∏—è—Ö –∏ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è–º –∫ –Ω–∏–º')
    bot.register_next_step_handler(message, callback=send_respond_vacancies)
    bot.setup_mode('vacancies')


def send_respond_movies(message: Message):
    print('send_respond_movies')
    # –±–æ—Ç –æ—Ç—Å—ã–ª–∞–µ—Ç –≤–æ–ø—Ä–æ—Å –≤ ChatGpt API –∏ –ø–æ–ª—É—á–µ–Ω–Ω—ã–π –æ—Ç–≤–µ—Ç –ø–∏—à–µ—Ç –≤ —á–∞—Ç
    try:
        with open('dataset_movies.txt', 'r', encoding='utf-8') as f:
            lines = f.readlines()
            text = ''.join(lines)
            bot.send_message(message.from_user.id, OpenAIWrapper().get_answer(
                f"–ù–∞–π–¥–∏ –≤ —Ç–µ–∫—Å—Ç–µ –Ω–∏–∂–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ {message.text} \n \n {text}"))

    except Exception as e:
        bot.send_message(message.from_user.id, f"–í –º–æ–µ–π –±–∞–∑–µ –Ω–µ—Ç —Ç–∞–∫–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é. –ò–∑–º–µ–Ω–∏—Ç—å –∑–∞–ø—Ä–æ—Å")


@bot.message_handler(commands=['movies'])
def movies(message: Message):
    print('handle_movies')
    if not verify_user(message=message):
        exit()

    bot.send_message(message.from_user.id, text='–ó–∞–¥–∞–π –º–Ω–µ –≤–æ–ø—Ä–æ—Å –æ —Ñ–∏–ª—å–º–∞—Ö 2022 –≥–æ–¥–∞')
    bot.register_next_step_handler(message, callback=send_respond_movies)
    bot.setup_mode('movies')


def send_respond_from_gpt(message: Message):
    print('send_respond_lets_chat')
    # –±–æ—Ç –æ—Ç—Å—ã–ª–∞–µ—Ç –≤–æ–ø—Ä–æ—Å –≤ ChatGpt API –∏ –ø–æ–ª—É—á–µ–Ω–Ω—ã–π –æ—Ç–≤–µ—Ç –ø–∏—à–µ—Ç –≤ —á–∞—Ç
    openAIWrapper = OpenAIWrapper()
    response = openAIWrapper.get_answer(message.text)
    bot.send_message(message.from_user.id, text=response)


@bot.message_handler(commands=['lets_chat'])
def lets_chat(message: Message):
    print('handle_lets_chat')
    if not verify_user(message=message):
        exit()

    bot.send_message(message.from_user.id, text='–ó–∞–¥–∞–π –º–Ω–µ –≤–æ–ø—Ä–æ—Å –Ω–∞ –ª—é–±—É—é —Ç–µ–º—É')
    bot.register_next_step_handler(message, callback=send_respond_from_gpt)
    bot.setup_mode('lets_chat')


# —Å–µ–∫—Ü–∏—è –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞
@bot.message_handler(commands=['number'])  # Announced a branch to work on the <strong> number </strong> command
def phone(message):
    print('handle_number')
    keyboard = types.ReplyKeyboardMarkup(row_width=1, resize_keyboard=True)  # Connect the keyboard
    button_phone = types.KeyboardButton(text="–û—Ç–ø—Ä–∞–≤—å —Å–≤–æ–π –Ω–æ–º–µ—Ä",
                                        request_contact=True)  # Specify the name of the button that the user will see
    keyboard.add(button_phone)  # Add this button
    bot.send_message(message.chat.id, '–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–≤–æ–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞ –∫ –±–æ—Ç—É',
                     reply_markup=keyboard)  # Duplicate with a message that the user will now send his phone number to the bot (just in case, but this is not necessary)


# —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –≤–∏–¥–∏–º–æ—Å—Ç—å—é –∫–Ω–æ–ø–æ–∫ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã, –∑–∞–≤–∏—Å–∏—Ç –æ—Ç –ø—Ä–∞–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
def change_keyboard_buttons(message: Message, text: str):
    print('change_keyboard_buttons')
    a = types.ReplyKeyboardRemove()
    bot.send_message(message.from_user.id, text, reply_markup=a)


@bot.message_handler(content_types=[
    'contact'])  # Announced a branch in which we prescribe logic in case the user decides to send a phone number :)
def contact(message):
    print('handle_contact')
    if message.contact is not None:  # If the sent object <strong> contact </strong> is not zero

        # hire you must verify the phone number in white list phone numbers
        # if phone number in white list phone numbers, then you send message to user and remove button from keyboard
        content = None
        with open('whitelist_phone_numbers.txt', 'r') as file:
            # read all content of a file
            content = file.read()

        user_id = message.from_user.id
        username = message.from_user.username
        chat_id = message.chat.id

        if message.contact.phone_number in content:
            create_new_user = bot.user_actioner.create_user(user_id=user_id, username=username, chat_id=chat_id,
                                                            phone=message.contact.phone_number)

            # bot.send_message(message.chat.id, '–í–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –ø—Ä–∏–Ω—è—Ç. –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –±–æ—Ç–∞ –î–æ–∫—Ç—Ä–∏–Ω–∞.')
            change_keyboard_buttons(message, '–í–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –ø—Ä–∏–Ω—è—Ç. –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –±–æ—Ç Doctrina.\n'
                                             '–í–æ—Å–ø–æ–ª—å–∑—É–π—Ç–µ—Å—å –º–µ–Ω—é –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–æ—Å—Ç—É–ø–∞ –∫ —Ñ—É–Ω–∫—Ü–∏—è–º –±–æ—Ç–∞.')
        else:
            # bot.send_message(message.chat.id, '–í–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –Ω–µ –ø—Ä–∏–Ω—è—Ç. –î–æ—Å—Ç—É–ø –∫ –±–æ—Ç—É –∑–∞–ø—Ä–µ—â–µ–Ω.')
            change_keyboard_buttons(message, '–í–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –Ω–µ –ø—Ä–∏–Ω—è—Ç. –î–æ—Å—Ç—É–ø –∫ –±–æ—Ç—É –∑–∞–ø—Ä–µ—â–µ–Ω.')


# –∫–æ–Ω–µ—Ü —Å–µ–∫—Ü–∏–∏ –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞


def create_error_message(err: Exception) -> str:
    return f'Error: {datetime.now()} ::: {err.__class__}: {err}'


while True:
    try:
        bot.setup_resources()
        bot.polling(none_stop=True, timeout=123)
        #bot.infinity_polling(timeout=10, long_polling_timeout=5)
        print(f'restart bot {datetime.now()}')
    # inform admin about error
    except JSONDecodeError as err:
        # —Å–µ–∫—Ü–∏—è —Ä–∞–±–æ—Ç—ã —Å –ª–æ–≥–≥–∏—Ä–æ–≤–∞–Ω–∏–µ–º

        error_message = create_error_message(err)
        logger.error(error_message)
        # –∫–æ–Ω–µ—Ü —Å–µ–∫—Ü–∏–º —Ä–∞–±–æ—Ç—ã —Å –ª–æ–≥–≥–∏—Ä–æ–≤–∞–Ω–∏–µ–º
        print(f'{error_message} {datetime.now()}')
        # ADMIN_CHAT_ID - ID of administator's chat for informing about errors.
        # –í–∞—Ä–∏–∞–Ω—Ç –∑–∞–ø–∏—Å–∏ –æ—à–∏–±–æ–∫ –≤ –∞–¥–º–∏–Ω—Å–∫–∏–π —Ç–µ–ª–µ–≥—Ä–∞–º–º –∫–∞–Ω–∞–ª ADMIN_CHAT_ID
        bot.send_message(ADMIN_CHAT_ID, text='–û—à–∏–±–∫–∞: ' + f'{datetime.now()} ::: {err.__class__}: {err}')
        # –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π —Å–ø–æ—Å–æ–± –∑–∞–ø–∏—Å–∏ –æ—à–∏–±–∫–∏ –≤ –∞–¥–º–∏–Ω—Å—Ç–∫–∏–π —Ç–µ–ª–µ–≥—Ä–∞–º–º –∫–∞–Ω–∞–ª ADMIN_CHAT_ID —á–µ—Ä–µ–∑ post –∑–∞–ø—Ä–æ—Å
        bot.telegram_client.post(method='sendMessage',
                                 params={'text': f'Error: {error_message}', 'chat_id': ADMIN_CHAT_ID})
        bot.shutdown()
